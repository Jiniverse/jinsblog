{
  
    
        "post0": {
            "title": "一些画图技巧（持续更新）",
            "content": "import numpy as np import matplotlib.pyplot as plt # %matplotlib notebook # 示例数据 x = np.linspace(-np.pi,np.pi,100) y = np.sin(x) z = np.cos(x) t = np.linspace(0,10,100) . &#31616;&#21333;&#30340;&#22352;&#26631;&#36724;&#25805;&#20316; . &#38544;&#34255;&#22352;&#26631;&#36724; . 用 ax.set_axis_off() 去掉坐标轴。 . plt.plot(x,y,linewidth=3,color=&#39;blue&#39;) ax = plt.gca() ax.set_axis_off() . &#26631;&#31614;&#12289;&#32593;&#26684;&#19982;&#30011;&#26694; . plt.plot(x,y,linewidth=3,color=&#39;blue&#39;) ax = plt.gca() ax.set_yticks(np.arange(-1, 1.1, step=0.5)) # 设置标签位置 ax.set_yticklabels(np.arange(-1, 1.1, step=0.5),fontsize=14) # 设置标签字体大小 # 以上两句可以简化为如下一句 # plt.yticks(np.arange(-1, 1.1, step=0.5),fontsize=14) ax.set_xticks([-np.pi,-np.pi/2,0,np.pi/2,np.pi]) ax.set_xticklabels([r&#39;$0$&#39;,r&#39;$ frac{T}{4}$&#39;,r&#39;$ frac{T}{2}$&#39;,r&#39;$ frac{3}{4}T$&#39;,r&#39;$T$&#39;],fontsize=14) ax.grid(color=&#39;g&#39;, linestyle=&#39;--&#39;, linewidth=2) # 加上网格 # 改变画框粗细 for axis in [&#39;top&#39;,&#39;bottom&#39;,&#39;left&#39;,&#39;right&#39;]: ax.spines[axis].set_linewidth(2.0) . 3d &#22352;&#26631;&#36724; . 3d的图，默认的样子是长这样的： . fig = plt.figure() ax = plt.gca(projection=&#39;3d&#39;) ax.plot(x,y,z, zdir=&#39;z&#39;, color = &#39;red&#39;, linewidth=3) . [&lt;mpl_toolkits.mplot3d.art3d.Line3D at 0x7f28f664b370&gt;] . 若想隐藏坐标轴，与2d一样，可以用 ax.set_axis_off(). 只不过2d的背景是透明的，而3d的背景是白色的。 . fig = plt.figure() ax = plt.gca(projection=&#39;3d&#39;) ax.plot(x,y,z, zdir=&#39;z&#39;, color = &#39;red&#39;, linewidth=3) ax.set_axis_off() . 如果想保留坐标轴，只把背景和网格去掉，可用下面的函数。 . def clear_pane(ax=None): if ax is None: ax = plt.gca() # First remove fill ax.xaxis.pane.fill = False ax.yaxis.pane.fill = False ax.zaxis.pane.fill = False # Now set color to white (or whatever is &quot;invisible&quot;) ax.xaxis.pane.set_edgecolor(&#39;w&#39;) ax.yaxis.pane.set_edgecolor(&#39;w&#39;) ax.zaxis.pane.set_edgecolor(&#39;w&#39;) # get rid of the grid ax.grid(False) . fig = plt.figure() ax = plt.gca(projection=&#39;3d&#39;) ax.plot(x,y,z, zdir=&#39;z&#39;, color = &#39;red&#39;, linewidth=3) clear_pane() . &#20844;&#20849;&#22270;&#30011; . &#21452;&#32437;&#36724; . 两个不同的纵轴共用一个横轴时，用 ax2 = ax1.twinx(). . fig = plt.figure() ax1 = plt.gca() ax2 = ax1.twinx() ax1.plot(x,y,&#39;r&#39;) ax2.plot(x,z,&#39;b&#39;) ax2.spines[&#39;left&#39;].set_color(&#39;red&#39;) ax2.spines[&#39;right&#39;].set_color(&#39;blue&#39;) . &#20844;&#29992;&#27178;&#36724; . fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True) ax1.plot(x,y) ax2.plot(x,z) # 增加顶部的坐标轴ticks ax1.tick_params(axis=&quot;x&quot;, bottom=True, top=True, labelbottom=False, labeltop=True) . &#20844;&#29992;&#32437;&#36724; . fig, (ax1, ax2) = plt.subplots(ncols=2, sharey=True) ax1.plot(x,y) ax2.plot(x,z) . [&lt;matplotlib.lines.Line2D at 0x7f28f6164190&gt;] . &#20844;&#29992;Colorbar . fig, axes = plt.subplots(nrows=2, ncols=2) for ax in axes.flat: im = ax.imshow(np.random.random((10,10)), vmin=0, vmax=1) fig.subplots_adjust(right=0.8) cbar_ax = fig.add_axes([0.85, 0.15, 0.05, 0.7]) fig.colorbar(im, cax=cbar_ax) . &lt;matplotlib.colorbar.Colorbar at 0x7f28f60cf9a0&gt; . &#28176;&#21464;&#33394;&#26354;&#32447; . 有时候画曲线时可以用颜色来表示另一个参数。比如画粒子轨迹时用颜色来表示时间，2d的变色曲线画图函数如下，原理是将曲线分成多个小段，每小段赋予一个颜色。源代码来源：source. . import matplotlib.collections as mcoll def colorline( x, y, z=None, cmap=plt.get_cmap(&#39;jet&#39;), norm=plt.Normalize(0.0, 1.0), linewidth=3, alpha=1.0): # Default colors equally spaced on [0,1]: if z is None: z = np.linspace(0.0, 1.0, len(x)) # Special case if a single number: if not hasattr(z, &quot;__iter__&quot;): # to check for numerical input -- this is a hack z = np.array([z]) z = np.asarray(z) segments = make_segments(x, y) lc = mcoll.LineCollection(segments, array=z, cmap=cmap, norm=norm, linewidth=linewidth, alpha=alpha) ax = plt.gca() ax.add_collection(lc) ax.set_xlim([np.min(x),np.max(x)]) ax.set_ylim([np.min(y),np.max(y)]) return lc def make_segments(x, y): points = np.array([x, y]).T.reshape(-1, 1, 2) segments = np.concatenate([points[:-1], points[1:]], axis=1) return segments . fig = plt.figure() line = colorline(x,y,t, cmap=plt.get_cmap(&#39;jet&#39;), norm=plt.Normalize(np.min(t), np.max(t))) plt.colorbar(line) . &lt;matplotlib.colorbar.Colorbar at 0x7f28f6383b80&gt; . 同样的方法可以写一个3d的有色曲线函数： . from mpl_toolkits.mplot3d.art3d import Line3DCollection def colorline3d( x, y, z, t=None, cmap=plt.get_cmap(&#39;jet&#39;), norm=plt.Normalize(0.0, 1.0), linewidth=3, alpha=1.0): # Default colors equally spaced on [0,1]: if t is None: t = np.linspace(0.0, 1.0, len(x)) # Special case if a single number: if not hasattr(t, &quot;__iter__&quot;): # to check for numerical input -- this is a hack t = np.array([t]) t = np.asarray(t) segments = make_segments3d(x, y, z) lc = Line3DCollection(segments, array=t, cmap=cmap, norm=norm, linewidth=linewidth, alpha=alpha) ax = plt.gca(projection=&#39;3d&#39;) ax.add_collection3d(lc, zdir=&#39;z&#39;) ax.set_xlim([np.min(x),np.max(x)]) ax.set_ylim([np.min(y),np.max(y)]) ax.set_zlim([np.min(z),np.max(z)]) return lc def make_segments3d(x,y,z): points = np.array([x, y, z]).T.reshape(-1, 1, 3) segments = np.concatenate([points[:-1], points[1:]], axis=1) return segments . fig = plt.figure() line = colorline3d(x,y,z,t, norm=plt.Normalize(0.0, 10.0)) plt.colorbar(line) clear_pane() . 需要注意的是三维的 Line3DCollection 画的变色曲线在每个小段的连接处其实是不光滑的（见stackoverflow）. 用下面的方法可以画光滑的3d变色曲线，但 colorbar 需要自己额外定义。 . from matplotlib import cm fig = plt.figure() ax = fig.gca(projection=&#39;3d&#39;) N = x.shape[0] cmap = plt.get_cmap(&#39;jet&#39;)(np.linspace(0,1,N)) for i in range(N-1): ax.plot(x[i:i+2], y[i:i+2], z[i:i+2], color=cmap[i], linewidth = 3) plt.colorbar(cm.ScalarMappable(norm=plt.Normalize(0, 10), cmap=plt.get_cmap(&#39;jet&#39;)),ax=ax) clear_pane() .",
            "url": "https://jiniverse.github.io/jinsblog/python/2022/01/05/python-tricks.html",
            "relUrl": "/python/2022/01/05/python-tricks.html",
            "date": " • Jan 5, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "如何在超算上跑 jupyter notebook",
            "content": "在超算上跑 jupyter notebook . 在登录节点跑 jupyter notebook . 先在本地配置好ssh登录信息，例如 . Host example Hostname ssh.example.com User someone Port 22 . 然后用ssh连接远程服务器后者超算，并做本地的端口映射，例如 . ssh example -L 8000:127.0.0.1:8890 . 其中 8000 对应的是本地端口，8890 是远程端口，在登录节点上运行 . jupyter-notebook --no-browser --port=8890 . 注意端口要与ssh连接的端口保持一致。最后在本地浏览器里访问 127.0.0.1:8000 即可打开登录节点运行的 jupyter notebook. . . 在登录节点跑 jupyter 一定程度上能节省计算资源，但仅适用于内存占用较少的程序，数据量比较大的时候应该用远程节点跑 用远程节点跑 jupyter notebook . 在远程服务器创建如下脚本（假设命名为 jupyter.job ） . #!/bin/bash #SBATCH --nodes 1 #SBATCH --time 12:00:00 #SBATCH --job-name jupyter-notebook #SBATCH -o /path/to/logfile/jupyter-output.log #SBATCH -e /path/to/logfile/jupyter-error.log # get tunneling info XDG_RUNTIME_DIR=&quot;&quot; port=$(shuf -i8000-9999 -n1) node=$(hostname -s) user=$(whoami) # print tunneling instructions jupyter-log echo -e &quot; MacOS or linux terminal command to create your ssh tunnel ssh example -N -L ${port}:${node}:${port} Use a Browser on your local machine to go to: localhost:${port} (prefix w/ https:// if using password) &quot; jupyter-notebook --no-browser --port=${port} --ip=${node} . 将其中的 /path/to/logfile/ 替换为你想要的路径，将 example 改为你定义的 Host. 用 sbatch jupyter.job 提交任务，而后在输出文件 jupyter-output.log 中复制ssh的连接信息，在本地终端中运行。最后在本地浏览器中访问 127.0.0.1:${port}，其中 ${port} 是输出文件中相应的端口号，大功告成！ .",
            "url": "https://jiniverse.github.io/jinsblog/server/2021/11/24/slurm-jupyter.html",
            "relUrl": "/server/2021/11/24/slurm-jupyter.html",
            "date": " • Nov 24, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "用 python 画动画",
            "content": "&#22312; jupyter notebook &#20013;&#23637;&#29616;&#21160;&#30011; . 首先为了在 jupyter notebook 中展现动画，要先载入交互式绘图： . %matplotlib notebook #calling it a second time may prevent some graphics errors %matplotlib notebook . &#29992; FuncAnimation &#30011;&#21160;&#30011; . &#31616;&#21333;&#31034;&#20363; . 利用 FuncAnimation 可以实现 python 动画，下面是一个例子： . import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation fig, ax = plt.subplots() # line, = ax.plot([]) x = np.linspace(0, 2*np.pi, 100) y = np.sin(x) line, = ax.plot(x, y) # plt.plot(x, y) ax.set_xlim(0, 2*np.pi) ax.set_ylim(-1.1, 1.1) def animate(frame_num): y = np.sin(x + 2*np.pi * frame_num/100) line.set_data((x, y)) return line ani = FuncAnimation(fig, animate, frames=100, interval=5) # plt.show() # ani.save(&#39;ani.mp4&#39;,fps=100) # ani.save(&#39;ani.gif&#39;, writer=&#39;imagemagick&#39;, fps=100) . 其中 frames=100 是总帧数， interval=5 是每帧之间的间隔，单位是毫秒。 . &#20851;&#20110;&#20648;&#23384; . FuncAnimation 返回对象可以直接存为 .mp4 格式的文件，例如上述示例中用 ani.save(&#39;ani.mp4&#39;,fps=100) 进行储存。由于 matplotlib 本身不支持 .gif 格式的储存，若要保存为 .gif 格式文件，必须安装外部软件来实现，比如 imagemagick. 在正确安装 ImageMagick 之后，可用它来实现 .gif 格式的存储，例如上述示例中，储存语句为 ani.save(&#39;ani.gif&#39;, writer=&#39;imagemagick&#39;, fps=100). . Note: 用 plot 函数作图时，用 set_data 更新数据；对于 imshow 或 pcolormesh 作图则用 set_array 来更新数据。 . pcolormesh &#21160;&#30011; . 下面是一个简单的 pcolormesh 动画 . import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation y = np.linspace(-np.pi, np.pi, 100) x = np.linspace(-np.pi, np.pi, 100) C = np.ones((100, 100)) * float(&#39;nan&#39;) # intantiate empty plot (values = nan) fig, ax = plt.subplots() pcmesh = ax.pcolormesh(x, y, C, vmin=-1, vmax=1, shading=&#39;gouraud&#39;) # generate some new data X, Y = np.meshgrid(x, y) def animate(frame_num): C = np.sin(X+2*np.pi * frame_num/100) # ravel() converts C to a 1d-array pcmesh.set_array(C.ravel()) return pcmesh ani = FuncAnimation(fig, animate, frames=100, interval=3) . 注意：shading=&#39;gouraud&#39; 必须要加上，否则会报错: . ValueError: total size of new array must be unchanged . &#30011;&#21160;&#30011;&#30340;&#19968;&#33324;&#26041;&#27861; . 从上面两个例子中可以看到，不同的画图函数更新数据的方法不同，当调用一些陌生的绘图指令时更是不知道如何更新数据。有种通用的方法是每次都清除面板、重新绘图，有点类似 matlab 里画动画的操作，示例如下： . import numpy as np import matplotlib.pyplot as plt from matplotlib.animation import FuncAnimation fig, ax = plt.subplots() x = np.linspace(0, 2*np.pi, 100) y = np.sin(x) line, = ax.plot(x, y) # plt.plot(x, y) ax.set_xlim(0, 2*np.pi) ax.set_ylim(-1.1, 1.1) def animate(frame_num, x, plot): y = np.sin(x + 2*np.pi * frame_num/100) ax.clear() plot = ax.plot(x, y) ax.set_xlim(0, 2*np.pi) ax.set_ylim(-1.1, 1.1) return plot plot_ani = FuncAnimation(fig, animate, frames=100 ,fargs=(x, line),interval=5) . &#29992; imageio &#21019;&#24314; gif . 当然咯，如果你觉得 FuncAnimation 的使用规则太过于复杂，那么还可以用一种极其简单的方法来画动画，就是把构成动画的每一帧图形都保存下来，然后利用 imageio 来创建 .gif 格式文件。 . import numpy as np import matplotlib.pyplot as plt import imageio y = np.linspace(-np.pi, np.pi, 100) x = np.linspace(-np.pi, np.pi, 100) X, Y = np.meshgrid(x, y) # save every frame of animation for i in range(100): C = np.sin(X+2*np.pi * i/100) fig, ax = plt.subplots() ax.pcolormesh(x, y, C, vmin=-1, vmax=1, shading=&#39;gouraud&#39;) plt.savefig(&#39;figs/&#39;+str(i).zfill(3)+&#39;.png&#39;) # to create gif images = [] for i in range(100): filename = &#39;figs/&#39;+str(i).zfill(3)+&#39;.png&#39; images.append(imageio.imread(filename)) imageio.mimsave(&#39;ani.gif&#39;, images, duration=0.01) . 注意：duration 的单位是秒。 .",
            "url": "https://jiniverse.github.io/jinsblog/python/2021/11/24/animation-summary.html",
            "relUrl": "/python/2021/11/24/animation-summary.html",
            "date": " • Nov 24, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jiniverse.github.io/jinsblog/example/2020/02/20/test.html",
            "relUrl": "/example/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jiniverse.github.io/jinsblog/example/2020/01/14/test-markdown-post.html",
            "relUrl": "/example/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "I’m a PhD student in plasma physics at Peking University. I use this blog site to take some study notes about programming and data processing. .",
          "url": "https://jiniverse.github.io/jinsblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jiniverse.github.io/jinsblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}